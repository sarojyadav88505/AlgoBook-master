//C-SCAN disk scheduling

//head-->head position
//rs[]-->request sequence
//front-->position of current element
//rear-->position of last element
//rs0[]-->array to store rs[i]<head
//rs1[]-->array to store rs[i]>head
//dir-->head direction(towards end(1) or towards beginning(0))
//n0-->number of elements in rs0[]
//n1-->number of elements in rs1[]

//On inputting reguest-sequence(r),

        scanf("%d",&r);
        if(r>head)
        {
            rs1[i]=r;
            i++;
            rear1+=1;
        }
        else
        {
            rs0[j]=r;
            j++;
            rear0+=1;
        }
    
//Sort both arrays r0[] and r1[]
//Servicing request according to head direction
    if(dir==0) //towards beginning
    {
        for(i=n0-1,j=0;i>=0,j<n0;i--,j++)
        {
            rs[j]=rs0[i];
            rear+=1;
        }
        rs[rear+1]=0;
        rear+=1;
        for(i=0,j=n0+1;i<n1,j<=n1+n0;i++,j++)
        {
            rs[j]=rs1[i];
            rear+=1;
        }
        
    }
    else //towards end
    {
        for(i=0,j=0;i<n1,j<n1;i++,j++)
        {
            rs[j]=rs1[i];
            rear+=1;
        }
        rs[rear+1]=end;
        rear+=1;
        rs[rear+1]=0;
        rear+=1;
        for(i=0,j=n1+2;i<n0,j<n1+n0+2;i++,j++)
        {
            rs[j]=rs0[i];
            rear+=1;
        }
    }
   
//Calculating seek-time
    for(front=0;front<=rear;front++)
    {
        d=abs(rs[front]-head);
        printf("\n%d to %d: %d",head,rs[front],d);
        dist+=d;
        head=rs[front];
    }
//print total seek-time and average seek time
