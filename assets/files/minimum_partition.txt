//Partition a set into two subsets such that the difference of subset sums is minimum


int findMinRec(int arr[], int i, int sumCalculated, int sumTotal) 
{  
    if (i==0) 
        return abs((sumTotal-sumCalculated) - sumCalculated); 
  
    // For every item arr[i], we have two choices 
    // (1) We do not include it first set 
    // (2) We include it in first set 
    // We return minimum of two choices 
    return min(findMinRec(arr, i-1, sumCalculated+arr[i-1], sumTotal), 
               findMinRec(arr, i-1, sumCalculated, sumTotal)); 
} 
  
// Returns minimum possible difference between sums 
// of two subsets 
int findMin(int arr[], int n) 
{ 
    // Compute total sum of elements 
    int sumTotal = 0; 
    for (int i=0; i<n; i++) 
        sumTotal += arr[i]; 
  
    // Compute result using recursive function 
    return findMinRec(arr, n, 0, sumTotal); 
} 
